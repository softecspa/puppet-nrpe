#!/usr/bin/env python

"""Nagios plugin per monitorare i crediti BeSMS/EhiWeb in base al numero e data
di scadenza."""

import os
import sys

libpath = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib')
try:
    sys.path.insert(0, os.path.realpath(os.environ['MYLIBDIR']))
except KeyError:
    sys.path.insert(0, libpath)

try:
    import nagiosplugin
    import mechanize
except ImportError as e:
    print >>sys.stderr, ('Import error: %s' % e)
    sys.exit(2)

import datetime
import re
import socket

__version__ = '0.1 alpha'
__author__ = 'Lorenzo Cocchi <lorenzo.cocchi@softecspa.it>'

check = nagiosplugin.NagPlugin(pluginname=os.path.splitext(__file__)[0],
                               tagstatusline='besms',
                               description='check BeSMS/EhiWeb',
                               version=__version__)

check.add_cmdlineoption('-H', '--hostname', 'host', 'IP or hostname',
                        required=True)

check.add_cmdlineoption('-p', '--port', 'port', 'port to connect, default 80')

check.add_cmdlineoption('-u', '--uri', 'uri', 'URI')

check.add_cmdlineoption('-a', '--authorization', 'authorization',
                        'Username and password, separated by ":"',
                        required=True)

check.add_cmdlineoption('-S', '--ssl', 'ssl',
                        'Connect via SSL. Port defaults to 443',
                        action='store_true')

check.add_cmdlineoption('-t', '--timeout', 'timeout',
                        'HTTP timeout, default 10.0s', default=10.0,
                        type=float)

check.add_cmdlineoption('-w', '--warning', 'warning', 'Warnign threshold,'
                        ' default 500:', default='500:')

check.add_cmdlineoption('-c', '--critical', 'critical', 'Critical trhreshold,'
                        ' default 400:', default='400:')

check.add_cmdlineoption('-W', '--days-warning', 'dayswarning',
                        'Number of days before expiration, default 60:',
                        default='60:')

check.add_cmdlineoption('-C', '--days-critical', 'dayscritical',
                        'Number of days before expiration, default 30:',
                        default='30:')

check.add_cmdlineoption('-D', '--debug', 'debug', 'HTTP debug',
                        action='store_true')

check.parse_cmdlineoptions()

(host,
 port,
 ssl,
 uri,
 authorization,
 timeout,
 debug,
 warning,
 critical,
 dayswarning,
 dayscritical) = (check.options.host,
                  check.options.port,
                  check.options.ssl,
                  check.options.uri,
                  check.options.authorization,
                  check.options.timeout,
                  check.options.debug,
                  check.options.warning,
                  check.options.critical,
                  check.options.dayswarning,
                  check.options.dayscritical)

(OK, WARNING, CRITICAL, UNKNOWN) = range(0, 4)

try:
    username, password = authorization.split(':')
except ValueError as e:
    check.ret2nagios(CRITICAL, 'wrong format of authentication data')

pat_failed_login = re.compile(
    r'\s.+<strong>(Username\s+o\s+Password\s+errati)</strong>')

pat_residual_credits = re.compile(
    r"""
    # credits
    credito\s+residuo\s+&egrave;\s+di\s+<STRONG>
    (?P<residual_credits>\S+)
    \s+crediti</STRONG>,\s?
    # \n
    .
    # expiration date
    da\s+consumare\s+entro\s+il\s+<STRONG>
    (?P<expiration_date>\S+)
    </STRONG>\.?
    """,
    re.VERBOSE | re.DOTALL)

#residual_credits, expiration_date = None, None
proto = 'https' if ssl else 'http'

if ssl and not port:
    port = 443
elif not port:
    port = 80

if host.endswith('/'):
    host = re.sub('/$', '', host)

if uri:
    if uri.startswith('/'):
        uri = re.sub('^/', '', uri)
    url = '%s://%s:%s/%s' % (proto, host, port, uri)
else:
    url = '%s://%s:%s/' % (proto, host, port)

# timeout value for python's mechanize
socket.setdefaulttimeout(timeout)

br = mechanize.Browser()
br.set_debug_redirects(debug)
br.set_debug_responses(debug)
br.set_debug_http(debug)
br_headers = '%s %s' % ('Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:17.0)',
                        'Gecko/20100101 Firefox/17.0')
br.addheaders = [('User-agent', br_headers)]

check.verbose(1, 'Open URL: %s' % url)

try:
    resp = br.open(url)
except (mechanize.HTTPError, mechanize.URLError) as e:
    check.ret2nagios(CRITICAL, '%s: %s' % (url, e))

check.verbose(1, 'URL: %s' % resp.geturl())
check.verbose(1, 'HTTP response code: %s' % resp.code)
check.verbose(2, 'HTTP headers:\n%s' % (''.join(resp.info().headers)))

if resp.code != 200:
    check.ret2nagios(CRITICAL, '%s: response code %s' % (url, resp.code))

check.verbose(1, 'Login...')

try:
    br.select_form(nr=0)
    br.form['username'] = username
    br.form['password'] = password
    resp_login = br.submit()
except (mechanize.FormNotFoundError, mechanize.ControlNotFoundError) as e:
    resp.close()
    check.ret2nagios(CRITICAL, '%s: %s' % (url, e))

check.verbose(1, 'HTTP response code: %s' % resp_login.code)

if resp_login.code != 200:
    resp_login.close()
    check.ret2nagios(CRITICAL, '%s: response code %s' % (url,
                                                         resp_login.code))

# HTTP response in one line
resp_oneline = ''.join(resp_login)

f = pat_failed_login.search(resp_oneline)
if f:
    resp_login.close()
    check.ret2nagios(CRITICAL, f.group(1))

m = pat_residual_credits.search(resp_oneline)
if m:
    residual_credits = m.groupdict()['residual_credits']
    expiration_date = m.groupdict()['expiration_date']
else:
    resp_login.close()
    check.ret2nagios(UNKNOWN, 'residual credits or expiration date not found')

resp_login.close()
residual_credits = re.sub('(\.|,[0-9]+$)', '', residual_credits)
e_date = datetime.datetime.strptime(expiration_date, '%d/%m/%Y')
time_delta = e_date - datetime.datetime.now()

check.verbose(1, 'credits %s, date %s, timedelta %s' % (residual_credits,
                                                        expiration_date,
                                                        time_delta.days))

check.add_output('credits %s, expires in %s day(s) (%s)' % (residual_credits,
                                                            time_delta.days,
                                                            expiration_date))
check.add_performancedata('credits', residual_credits, '', warn=warning,
                          crit=critical)
check.add_performancedata('expiration_days', time_delta.days, '',
                          warn=dayswarning, crit=dayscritical)

try:
    retcode = check.value_wc_to_returncode(int(time_delta.days), dayswarning,
                                           dayscritical)
    if retcode != OK:
        check.ret2nagios(retcode, check.output,
                         performancedata=check.performancedata)

    check.add_returncode(check.value_wc_to_returncode(int(residual_credits),
                                                      warning, critical))
except ValueError as e:
    check.ret2nagios(check.RETCODE['UNKNOWN'], str(e))

check.exit()

# EOF

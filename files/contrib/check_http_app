#!/usr/bin/env python

"""\

Si tratta  di  un  semplice  plugin  che  ha  lo  scopo  di  parsare  il
monitoraggio gia' implementato sulle webapps. In base alle  informazioni
presenti nella pagina web si  decide  lo  "status"  del  servizio  e  si
formatta l'output in modo da rispettare le regole dei plugin del  Nagios
(text and perfdata). Sono supportati HTTP  e  HTTPS  e  l'autenticazione
Basic o Digest.

check_http_app -H web88.j01.jcluster.softecspa.it -p 8180 -u '/monitor?nagios'
check_http_app -H web88.j01.jcluster.softecspa.it -p 8180 \
    -u '/monitor?nagios' -a 'username:password'

"""

import os
import sys

libpath = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'lib')
try:
    sys.path.insert(0, os.path.realpath(os.environ['MYLIBDIR']))
except KeyError:
    sys.path.insert(0, libpath)

try:
    import nagiosplugin
    import liburl
except ImportError as e:
    print >>sys.stderr, ('Import Error: %s' % e)
    sys.exit(2)

try:
    import urllib.request as urllib2
except ImportError:
    import urllib2

import re

__version__ = '0.1'
__author__ = 'Lorenzo Cocchi <lorenzo.cocchi@softecspa.it>'

check = nagiosplugin.NagPlugin(pluginname=os.path.splitext(__file__)[0],
                               tagstatusline='check_http_app',
                               description='check HTTP application',
                               version=__version__)

check.add_cmdlineoption('-H', '--hostname', 'host', 'IP or hostname',
                        required=True)

check.add_cmdlineoption('-p', '--port', 'port', 'port to connect, default 80')

check.add_cmdlineoption('-u', '--uri', 'uri', 'URI')

check.add_cmdlineoption('-a', '--authentication', 'authentication',
                        'Username and password, separated by ":"')

check.add_cmdlineoption('-S', '--ssl', 'ssl', 'Connect via SSL',
                        action='store_true')

check.add_cmdlineoption('-t', '--timeout', 'timeout',
                        'HTTP timeout, default 10.0s', default=10.0,
                        type=float)

check.add_cmdlineoption('-D', '--debug', 'debug',
                        'HTTP(S) debug, default False',
                        action='store_true')


check.parse_cmdlineoptions()

(host,
 port,
 ssl,
 uri,
 authentication,
 timeout,
 debug) = (check.options.host,
           check.options.port,
           check.options.ssl,
           check.options.uri,
           check.options.authentication,
           check.options.timeout,
           check.options.debug)

(OK, WARNING, CRITICAL, UNKNOWN) = range(0, 4)
headers = ''
proto = 'https' if ssl else 'http'

if ssl and not port:
    port = 443
elif not port:
    port = 80

if host.endswith('/'):
    host = re.sub('/$', '', host)

if uri:
    if uri.startswith('/'):
        uri = re.sub('^/', '', uri)
    url = '%s://%s:%s/%s' % (proto, host, port, uri)
else:
    url = '%s://%s:%s/' % (proto, host, port)

check.verbose(1, 'Open %s' % url)

try:
    response = liburl.Request(url=url, debug=debug, timeout=timeout,
                              authentication=authentication)
except ValueError as e:
    check.ret2nagios(CRITICAL, e)
except urllib2.HTTPError as e:
        check.ret2nagios(CRITICAL, '%s %s' % (e.code, e.reason))
except urllib2.URLError as e:
    check.ret2nagios(CRITICAL, '%s' % e.reason)

response.close()

check.verbose(1, 'HTTP code: %s' % response.code)
if check.options.verbose == 1:
    for k in response.headers:
        headers += '%s: %s\n' % (k, response.headers[k])
    check.verbose(1, 'HTTP headers:\n' + headers.rstrip())

items = response.html[0].split(' ')
status = items[0].strip()
out_and_perfdata = ' '.join(items[2:]).rstrip()

if not status:
    check.ret2nagios(check.RETCODE['UNKNOWN'], 'empty status')

try:
    check.ret2nagios(check.RETCODE[status], out_and_perfdata)
except ValueError as e:
    check.ret2nagios(check.RETCODE['UNKNOWN'], str(e))
